/**
 * Mains Package of the java project
 */
package KmeansAlgo;

/**
 * Imports
 */
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

import org.knowm.xchart.SwingWrapper;
import org.knowm.xchart.XYChart;
import org.knowm.xchart.demo.charts.ExampleChart;



/**
 * @author BELKHOUS
 * @version 3.0
 * Date: 30/09/2016
 * 
 * Main class that allows to implement the k-means algorithm
 */
public class KMeans
{	
	// Data list for plots ( used only for the visualisation)
	public static List<Double> xData1 = new LinkedList<Double>();
	public static List<Double> yData1 = new LinkedList<Double>();
	
	public static List<Double> xData2 = new LinkedList<Double>();
	public static List<Double> yData2 = new LinkedList<Double>();
	
	public static List<Double> xData3 = new LinkedList<Double>();
	public static List<Double> yData3 = new LinkedList<Double>();
	
	public static List<Double> xData4 = new LinkedList<Double>();
	public static List<Double> yData4 = new LinkedList<Double>();
	
	public static List<Double> xData5 = new LinkedList<Double>();
	public static List<Double> yData5 = new LinkedList<Double>();
	
	public static List<Double> xData6 = new LinkedList<Double>();
	public static List<Double> yData6 = new LinkedList<Double>();
	
	public static List<Double> xData7 = new LinkedList<Double>();
	public static List<Double> yData7 = new LinkedList<Double>();
	
	public static List<Double> xData8 = new LinkedList<Double>();
	public static List<Double> yData8 = new LinkedList<Double>();
	
	// Data list for centroids ( used only for the visualisation)
	public static List<Double> cxData1 = new LinkedList<Double>();
	public static List<Double> cyData1 = new LinkedList<Double>();
	
	public static List<Double> cxData2 = new LinkedList<Double>();
	public static List<Double> cyData2 = new LinkedList<Double>();
	
	public static List<Double> cxData3 = new LinkedList<Double>();
	public static List<Double> cyData3 = new LinkedList<Double>();
	
	public static List<Double> cxData4 = new LinkedList<Double>();
	public static List<Double> cyData4 = new LinkedList<Double>();
	
	public static List<Double> cxData5 = new LinkedList<Double>();
	public static List<Double> cyData5 = new LinkedList<Double>();
	
	public static List<Double> cxData6 = new LinkedList<Double>();
	public static List<Double> cyData6 = new LinkedList<Double>();
	
	public static List<Double> cxData7 = new LinkedList<Double>();
	public static List<Double> cyData7 = new LinkedList<Double>();
	
	public static List<Double> cxData8 = new LinkedList<Double>();
	public static List<Double> cyData8 = new LinkedList<Double>();
	
    
	// Iterator for the display
	private static int cpt=0;
	
	// Numbre of clusters
    public static int NUM_CLUSTERS = 0;    
    
    // dataCollection that refer to all the points
    private static double dataCollection[][] = new double[][] {	
    	{1.20411,3.95111},{1.56801,4.67127},{2.69291,3.07081},{2.04337,4.28668},{2.54868,4.12671},{2.31472,4.28725},{1.19921,3.03903},{2.50481,3.34715},{1.35919,3.23489},{2.76527,3.9211},{1.60139,3.255},{2.67163,3.64599},{2.94378,3.02105},{1.13251,4.39606},{1.10921,3.52018},{1.53247,3.31332},{2.47129,4.10047},{2.98459,4.1642},{2.17128,4.02796},{1.45088,3.71996},{1.15466,4.76561},{1.00722,3.35388},{2.80463,4.51202},{1.70103,3.16382},{2.74691,3.4663},{2.08492,3.3483},{1.7213,3.75655},{1.99429,3.66508},{1.77761,4.1268},{1.06114,3.88681},{2.64698,3.59361},{2.20013,4.11827},{2.69408,4.18472},{1.28247,3.86536},{1.21267,3.73336},{2.58532,3.36734},{1.49897,4.59254},{1.72122,3.3036},{2.10456,4.42224},{1.46742,3.85147},{2.88854,4.55234},{2.19977,3.60984},{1.3089,3.19406},{2.27492,4.0865},{2.32086,4.33606},{2.97332,3.96784},{2.92966,4.17345},{1.08611,4.62374},{1.35817,3.36859},{1.4891,3.57084},{2.10194,3.07442},{1.93818,4.60091},{2.66696,4.65939},{2.90451,3.77152},{2.08164,3.37193},{2.62299,3.97017},{2.92428,3.82276},{2.58001,3.23317},{2.01682,3.85492},{2.31968,3.33769},{1.19098,4.293},{2.30553,3.12064},{1.46644,4.39164},{2.74438,3.82461},{2.76023,3.23348},{2.39545,3.86217},{1.3079,3.33363},{1.46308,4.97486},{2.99303,3.36759},{1.74639,4.07466},{1.73953,3.36938},{1.04483,3.6638},{2.19214,4.62484},{1.89698,3.20896},{1.47977,3.21665},{1.54665,3.67075},{2.50965,4.85218},{1.79139,4.9761},{2.24382,3.53577},{1.80071,4.00405},{1.76924,3.19616},{2.86622,4.07715},{1.52979,3.3293},{2.05201,3.52282},{1.6969,4.7984},{2.59748,4.43642},{1.16778,4.64232},{1.10023,4.35992},{2.26716,3.9972},{2.56888,4.74693},{2.21386,3.11553},{1.41767,3.72351},{2.96771,4.20906},{1.6996,4.21153},{2.74482,4.50031},{1.21557,3.51407},{2.69647,3.08179},{2.59122,3.22626},{1.4111,3.64323},{1.74908,4.10799},{1.44163,3.34656},{1.54442,3.6094},{2.98888,3.64464},{2.96932,4.25604},{2.64184,4.5382},{2.00296,3.8557},{2.65373,4.42064},{2.57921,4.62144},{1.62969,3.27881},{1.83296,3.37452},{2.77912,4.04853},{1.88859,4.47559},{2.13033,3.4798},{2.70185,4.54142},{2.12303,3.45092},{1.64941,4.56466},{1.79748,4.19383},{1.17406,3.78636},{2.83847,3.14338},{1.0424,4.48031},{2.68158,4.04536},{1.33601,4.3353},{1.466,4.91522},{1.95674,4.09569},{1.19403,4.7897},{2.47021,4.97314},{1.83823,3.35879},{2.44873,4.96856},{1.8386,4.15058},{2.50998,4.96163},{2.6015,3.1594},{2.52629,3.39898},{2.35323,4.70034},{2.18535,4.1917},{2.84372,4.22774},{1.67201,4.5253},{1.27311,4.00802},{1.8606,3.7391},{1.92324,4.81734},{2.83479,4.11727},{2.60704,4.305},{2.09042,3.44528},{2.6638,3.53915},{1.41384,3.5024},{2.68972,4.92382},{1.46402,4.29122},{1.08322,4.99031},{2.69021,4.43644},{2.69066,3.87555},{1.62814,4.53438},{1.1033,4.30015},{2.05968,3.3764},{1.30818,4.92028},{2.11551,4.23142},{2.73762,3.9503},{1.34869,4.34467},{1.25531,4.43911},{2.78994,4.9191},{2.97825,3.20378},{1.4215,4.66797},{1.1276,3.88552},{1.95919,3.21082},{1.87583,3.6494},{2.64726,3.56649},{2.52495,3.2754},{1.10087,4.62825},{2.57555,4.16054},{1.00466,4.88373},{2.08082,4.12016},{2.11515,3.81845},{1.07046,4.46384},{1.16311,3.32577},{1.90294,4.95305},{1.24487,3.88119},{1.15683,3.66637},{1.54917,3.28443},{2.5519,4.50836},{1.49525,3.42773},{1.15776,3.14251},{1.99422,4.68272},{1.41791,4.09509},{2.31097,4.99346},{1.25563,4.31562},{2.87718,4.33645},{1.43579,3.99233},{1.1549,3.50625},{1.45616,3.31801},{1.83202,4.35911},{1.27106,4.07689},{1.2403,3.4279},{2.74327,3.78947},{1.71233,4.29516},{1.29783,4.20758},{2.72289,3.45559},{2.35008,3.71711},{1.13831,4.76799},{2.8122,4.44927},{2.76144,3.06783},{1.7649,4.63863},{2.40428,4.20068},{3.63095,9.55918},{4.70693,9.08712},{4.87719,8.53895},{3.44623,8.14825},{4.61584,8.68653},{3.57615,9.35911},{4.47599,9.28848},{3.65427,9.77382},{3.49605,8.37716},{3.22941,9.84613},{4.09427,8.36772},{4.61412,8.90647},{4.817,9.37557},{3.9743,8.58189},{4.01419,8.37858},{4.78257,9.64515},{4.93776,9.48951},{3.73227,9.81495},{3.02846,9.17849},{4.9632,9.6443},{4.86502,8.53935},{4.00341,9.34101},{4.82782,9.65768},{4.11484,8.32387},{3.03484,9.34425},{3.17001,9.12911},{4.71197,9.78413},{3.03558,9.52897},{4.1597,9.00988},{3.11086,8.17389},{4.38846,9.89344},{4.81904,9.32622},{4.38294,8.5513},{4.14117,9.4114},{4.7298,9.10436},{4.0557,9.59482},{4.64371,8.05911},{3.93583,9.47153},{4.71679,8.05067},{4.7954,9.75163},{4.39492,9.96541},{3.88074,9.10689},{4.74954,8.91633},{3.63586,8.90924},{4.92621,8.74672},{4.08313,9.31467},{3.64015,8.90217},{3.64089,8.02309},{4.45347,9.78206},{4.43449,9.18327},{3.88642,8.49019},{3.77808,8.53013},{3.5493,9.71391},{3.00166,8.26608},{4.76458,9.79706},{3.01771,9.1595},{4.76248,8.89845},{3.26639,9.51202},{4.81478,8.90224},{3.42126,9.74099},{4.64896,9.50439},{4.05566,8.28912},{3.40656,9.69655},{3.31221,9.86003},{4.4786,9.7467},{4.0433,8.36502},{3.23689,9.82138},{3.89515,8.78619},{4.5353,8.89681},{4.05227,9.29988},{3.69388,9.06998},{3.45937,8.45635},{4.96844,8.72576},{4.96837,9.78321},{4.628,8.38963},{4.5242,9.27696},{4.89403,8.57986},{4.56608,8.30059},{3.27641,9.87829},{3.16062,9.75501},{4.62499,9.20392},{3.12004,9.86188},{4.0253,9.01519},{3.64807,8.5606},{4.912,9.70035},{4.86048,8.60588},{3.77033,8.31985},{4.06224,8.73876},{4.04561,9.03061},{3.52198,8.67361},{4.42025,8.04618},{4.95057,9.31427},{3.62604,9.51665},{4.61486,8.90245},{4.39494,9.77547},{3.65746,9.01993},{3.97939,8.77749},{3.88181,8.00469},{4.79268,9.52989},{3.56529,9.70469},{4.23023,8.42577},{3.31057,8.00056},{3.74562,9.37281},{3.73932,9.79123},{3.40342,9.2613},{3.46483,9.82366},{4.30748,8.4154},{4.13793,9.93352},{4.93205,8.75279},{3.83596,9.32699},{3.52827,9.49342},{3.34692,9.50766},{3.27092,9.22873},{4.51235,8.0636},{3.75862,8.07764},{4.76829,9.98885},{3.50341,8.07886},{4.98941,9.24903},{4.45167,8.72873},{4.04025,9.85508},{4.99003,9.50509},{4.67875,9.29751},{4.92049,8.81668},{4.23103,9.85254},{4.56947,8.067},{4.17953,8.09773},{4.56042,9.52645},{4.60539,9.83134},{3.75518,9.11774},{4.89494,9.5138},{4.19539,9.66323},{4.50265,9.6988},{4.74209,9.49206},{3.94783,9.19376},{3.2208,9.98808},{4.04884,8.21083},{4.49317,8.72759},{4.50834,9.41366},{4.54426,8.73938},{4.26621,9.11373},{3.80637,8.44574},{4.21147,8.36679},{4.97219,8.81686},{3.19813,8.72738},{4.9346,8.09307},{3.24118,9.12999},{4.7563,9.74383},{3.82879,9.49838},{4.23589,9.77661},{3.69214,9.45668},{10.7647,3.74098},{10.6675,3.25787},{9.46856,3.17586},{9.67153,2.01283},{10.9152,3.93773},{10.1266,2.72161},{9.38347,2.33803},{10.0884,2.35566},{10.1549,3.28653},{10.083,3.08949},{10.3796,3.32422},{9.21948,3.1359},{10.068,3.04827},{9.63428,2.30393},{9.82488,3.32642},{10.7606,2.58958},{10.0674,3.42813},{10.8474,3.53596},{9.60399,2.51897},{10.5488,2.51923},{9.4567,2.67535},{10.2408,2.84018},{10.0134,2.32924},{10.1958,2.16827},{10.6158,2.27888},{10.2578,2.99537},{10.6031,3.47725},{9.13127,2.67114},{9.52552,2.76555},{9.97508,3.3504},{9.09197,2.73569},{10.94,3.15936},{9.16383,3.78742},{9.69533,2.76782},{9.30639,2.24411},{10.287,2.7631},{9.91946,2.52788},{10.6033,3.93285},{9.85712,2.79911},{9.10112,2.47289},{10.078,3.35889},{10.4683,2.68109},{9.83614,3.59954},{10.3522,3.36166},{9.36509,2.32731},{9.71206,2.45705},{10.063,2.65204},{10.6164,3.22683},{9.43946,2.31174},{10.9946,2.74585},{9.55586,3.28169},{10.5089,3.47532},{10.8096,3.11222},{10.4082,2.66669},{10.9113,3.50929},{10.1396,2.98933},{9.86817,2.60785},{10.6704,3.70431},{9.20739,3.02266},{10.066,2.57247},{10.35,3.77803},{10.0295,2.41297},{9.43007,2.64594},{10.6398,2.86953},{9.95769,3.63445},{10.6154,3.51355},{9.91614,3.12433},{9.98887,2.7257},{9.23655,2.39704},{10.3924,2.14789},{10.9063,2.53198},{10.1372,2.7745},{10.1398,2.80764},{9.47881,3.34722},{10.8303,3.54478},{10.9197,3.18027},{10.3228,2.94921},{10.5932,3.75288},{10.5952,3.23305},{9.6224,2.55285},{9.86749,2.23778},{9.06639,3.78363},{10.3621,3.05526},{9.50933,3.59866},{10.4523,3.90173},{10.7465,3.35862},{9.4337,2.88377},{9.13312,3.57353},{10.6914,2.61193},{9.92075,3.52171},{9.15671,2.84044},{9.70198,3.47952},{10.7897,2.29523},{10.2324,3.38481},{10.5283,3.8548},{10.9377,2.39577},{9.09258,2.00405},{9.1794,3.45469},{10.0593,2.68873},{10.0534,2.51161},{9.59045,2.7999},{10.8702,3.02416},{10.6837,2.00335},{9.59769,3.37508},{9.61528,3.51844},{9.89679,2.772},{9.35887,3.59878},{9.25152,2.14852},{10.894,3.48391},{10.5333,3.42228},{10.3387,3.47099},{10.818,3.43129},{10.475,3.99744},{9.88598,2.53435},{9.68617,3.93934},{10.046,3.27662},{9.73924,2.91619},{9.30078,2.42291},{9.91954,2.89847},{10.798,3.53482},{9.41691,2.69478},{9.30681,2.77578},{9.29356,2.55833},{9.9243,2.18756},{9.04225,2.45763},{10.6098,3.38096},{10.9286,3.42788},{9.81225,3.40366},{10.4253,3.69824},{10.938,2.11149},{10.6376,2.98397},{10.3881,2.37681},{10.9002,3.68889},{9.79972,2.81969},{9.58736,2.59771},{9.35451,3.00427},{10.2925,2.66133},{10.78,3.58605},{10.2197,2.70435},{10.7736,3.26191},{10.162,3.38345},{9.64286,3.09061},{9.81133,3.45512},{9.49427,2.23665},{10.1534,2.43228},{9.34814,2.79092},{10.4163,3.73626},{10.1677,3.31641},{10.4251,3.96745},{9.1361,2.01251},{9.56516,2.49061},{10.0168,3.85765},{10.1519,2.79683},{10.4437,2.3716},{10.5012,3.21731},{10.6335,2.66316},{9.60075,2.27637},{10.7538,3.41208},{10.7315,2.24804},{10.6487,2.88484},{9.68032,3.99688},{10.6758,2.09657},{10.7331,2.84349},{10.413,3.15828},{9.81094,3.54908},{10.1708,3.3761},{9.0397,2.18757},{10.2338,3.19164},{9.9844,2.67745},{10.5632,2.48558},{10.8948,3.19674},{10.1487,2.49551},{10.4731,2.90251},{10.9076,3.2046},{10.1506,3.55632},{9.08944,3.83087},{10.5532,3.76519},{10.9274,3.28633},{9.60868,3.34042},{9.44461,3.41963},{9.88951,3.6154},{9.79573,2.9292},{10.803,2.02948},{9.12084,2.78737},{9.70692,3.68408},{10.273,2.60168},{9.88082,2.4217},{10.0972,2.35394},{10.3242,3.00477},{10.5585,2.47476},{9.56109,3.64798},{9.30563,2.11429},{10.4132,2.23307},{10.4006,2.02185},{10.5735,3.84522},{10.4415,2.46301},{10.4606,2.23721},{10.3922,3.26359},{9.26668,3.51305},{9.05096,2.97361},{10.1971,3.32392},{10.5753,2.07795},{10.7456,2.67247},{9.43188,3.06982},{10.6772,3.99042},{10.5446,2.23833},{10.6384,3.85021},{9.35262,3.05157},{9.08328,3.75324},{10.0734,3.65678},{10.5985,2.5149},{9.11979,3.05909},{9.75211,3.51199},{9.32268,3.01879},{10.025,2.37364},{10.9924,2.22216},{10.6976,3.56768},{9.30011,3.44317},{9.24014,2.73199},{9.51298,3.91738},{9.72241,2.05756},{9.15572,2.36081},{10.9078,2.50834},{10.4124,3.99105},{9.26158,2.4858},{10.6478,3.86005},{10.0007,3.76762},{9.91913,3.75281},{10.2796,3.24181},{9.77159,2.30465},{10.6155,2.76399},{9.52681,3.31301},{9.33167,2.82692},{9.75617,2.57181},{10.5589,3.26915},{9.48919,2.28132},{10.3267,2.64491},{9.64213,3.23448},{10.1532,2.05451},{10.2255,3.41483},{9.54031,2.87336},{10.2749,3.541},{9.64098,2.19401},{10.2938,3.92059},{10.4358,2.0654},{9.22524,3.05127},{9.82939,2.75205},{9.36427,3.16106},{10.579,3.12044},{10.7329,3.13789},{1.3896,10.2221},{2.41921,11.7163},{1.86698,10.0613},{1.9508,10.0202},{1.11585,10.1763},{2.43506,10.6562},{2.0497,10.7099},{1.19716,11.6907},{1.90394,11.491},{2.61127,10.3398},{2.55637,11.8365},{2.39102,10.3858},{1.58857,11.7553},{2.54683,10.1675},{1.87574,11.2797},{2.30543,11.2653},{2.50177,10.7246},{1.98165,10.3687},{1.78598,11.9325},{1.38897,10.9018},{1.10878,11.824},{2.55798,11.1585},{1.53396,11.7551},{1.84916,11.4379},{2.24611,10.4604},{2.77765,10.8025},{1.29694,11.1687},{2.18825,10.8855},{1.92398,10.7351},{2.05305,11.7997},{1.01477,10.3585},{2.06506,11.5165},{2.08311,10.0467},{2.88528,11.8691},{2.97916,10.2743},{1.77091,10.0879},{1.09828,10.3289},{2.24642,10.6322},{1.08403,10.0956},{1.07013,11.3301},{1.55601,11.8478},{1.13263,10.8529},{2.01646,11.3209},{2.73845,11.9404},{1.05595,10.7915},{2.74016,10.0707},{2.14997,10.8052},{2.58726,10.2331},{1.85192,11.4725},{1.10216,10.8311},{2.74679,10.8731},{1.91902,11.8451},{2.20196,10.1654},{1.4773,11.286},{1.26102,10.5474},{1.61614,10.817},{1.39522,10.7488},{2.66998,11.4117},{1.06963,11.4084},{2.35212,10.1256},{1.19993,11.0923},{1.1963,11.3499},{2.89749,11.7836},{2.58297,10.7494},{2.25611,11.6851},{2.58049,11.0029},{1.5582,10.4995},{1.84796,11.7602},{1.66496,11.3253},{2.04615,10.926},{2.8727,11.6623},{2.74301,10.2679},{1.41105,11.413},{2.6796,10.4807},{1.82142,11.0317},{1.60627,11.0213},{1.124,10.8026},{1.37124,10.0215},{1.58613,11.9542},{1.77089,11.8422},{2.63934,10.3514},{1.84514,10.1975},{1.85089,11.6931},{2.9577,11.5158},{2.01837,11.0039},{1.44183,10.8911},{1.66614,10.1848},{2.15898,11.0772},{2.59784,10.8386},{2.55787,10.4193},{2.8703,10.1641},{2.4406,11.9943},{1.9667,11.8118},{1.01578,11.5528},{2.76605,10.7867},{2.39508,11.4054},{2.13805,10.2402},{2.60294,11.9889},{2.93332,11.5606},{2.50479,10.9517},{15.5645,4.94662},{16.8428,4.23063},{15.1315,4.00173},{15.078,4.72931},{16.8403,4.86568},{15.1486,4.71062},{15.0298,4.58916},{16.7049,3.99651},{16.401,4.72069},{15.5493,4.16706},{15.5074,4.94443},{15.5725,4.64542},{15.1846,3.17539},{16.6344,3.11795},{16.736,4.13915},{16.0696,3.30052},{16.0858,3.91239},{16.5312,4.21725},{16.9141,4.83897},{15.9466,4.75444},{16.7046,4.09511},{16.4651,4.73446},{15.6843,4.16997},{15.731,3.08528},{15.8907,4.28032},{16.2523,4.39803},{16.2247,4.82479},{16.0434,4.40938},{15.0002,3.6778},{16.5273,4.73622},{16.817,3.59698},{15.0367,3.90273},{16.5094,4.5679},{15.12,4.42349},{16.4069,4.06652},{16.1779,4.11151},{15.1616,3.64299},{15.846,3.84591},{16.813,4.57694},{15.9312,3.70362},{15.8573,3.18353},{15.1016,3.082},{15.0083,4.14509},{16.4914,3.0085},{16.8229,4.01872},{16.7447,4.63984},{16.6157,4.78147},{15.5426,4.12506},{16.3494,3.66254},{15.5486,3.75623},{16.7291,4.72648},{16.8677,4.89071},{15.3695,3.7137},{15.7366,3.18242},{15.2906,4.66781},{15.886,4.14789},{16.8513,3.98769},{16.2299,4.85966},{15.1328,3.72128},{16.8682,4.95567},{16.74,4.61289},{16.5955,4.3557},{16.3944,3.13809},{15.4808,3.74372},{15.8006,4.02932},{16.4999,3.5297},{15.7558,4.36768},{15.4204,4.12527},{15.0814,4.15702},{16.3077,3.37203},{15.8248,3.19373},{16.5199,3.67617},{16.1814,3.74982},{15.5358,4.3142},{16.4711,3.40399},{16.2699,4.21109},{15.0169,3.86539},{15.5668,4.41123},{16.0035,4.04755},{15.1549,4.8041},{15.0769,4.6549},{15.3338,3.83267},{16.0226,3.7542},{16.9579,4.10397},{16.9112,4.26563},{16.476,3.73605},{16.4594,3.99591},{16.4122,3.64078},{16.7457,4.94805},{16.955,4.21682},{15.352,4.22485},{15.4279,3.36892},{15.0902,3.9947},{16.7802,4.09371},{15.0423,4.9351},{15.8978,3.11912},{16.59,4.23161},{15.9518,3.61258},{16.9858,3.90972},{16.7165,4.89704},{13.1753,11.1925},{13.6331,11.6347},{13.1884,10.0453},{13.2755,11.9342},{14.9934,10.2305},{14.151,10.3454},{14.4553,11.5789},{13.7143,11.5456},{13.5736,10.4945},{13.6393,10.6159},{13.4296,11.5371},{13.735,10.0196},{13.7687,11.6868},{13.6322,10.7545},{13.5965,10.3487},{13.6515,10.7718},{14.5412,11.2846},{13.4066,11.7297},{14.3299,10.682},{14.6639,11.3233},{13.9125,10.8149},{14.6687,10.3678},{13.3938,10.383},{14.9134,10.9674},{13.8775,10.5526},{14.5833,11.3071},{13.0897,10.3183},{14.3267,10.8584},{13.005,11.9588},{14.6129,10.6015},{13.3075,10.2644},{14.3734,11.8488},{14.549,11.78},{14.5784,10.879},{13.462,11.2423},{13.2023,11.3745},{13.0572,11.871},{14.7423,10.4509},{13.254,11.6557},{14.4183,11.1315},{13.2083,11.0016},{13.4386,10.298},{14.3199,11.7653},{14.1564,11.3249},{14.7241,10.7693},{14.9265,10.0316},{14.0337,11.2999},{14.8804,10.5827},{14.0798,11.4588},{14.4616,11.5418},{13.7011,11.6639},{13.9163,10.7583},{14.5349,10.6586},{14.2092,11.7889},{13.3143,10.6276},{13.9204,10.5226},{14.6292,11.359},{13.8206,10.9491},{14.1242,11.977},{13.274,10.8483},{13.7462,10.2005},{13.88,11.7799},{14.5004,10.7604},{13.3626,10.5802},{13.2192,11.8242},{13.122,10.9203},{14.4881,11.0383},{14.6786,11.023},{14.697,10.8879},{13.8119,10.0113},{14.5155,11.7322},{13.5339,11.1447},{14.0912,11.3545},{13.0938,10.2154},{14.3315,10.3678},{14.0637,10.0777},{13.5683,11.9437},{14.8576,10.0687},{13.704,10.2202},{13.6489,10.9232},{13.0444,10.7709},{14.8435,11.5326},{14.8093,11.5222},{13.5556,11.5062},{13.41,11.3674},{14.5175,11.9255},{14.0996,10.0514},{14.0702,10.1908},{14.4058,11.1639},{13.4062,10.7373},{14.5317,11.4699},{13.815,10.1},{14.4135,10.6726},{13.1687,10.1176},{13.8928,10.8176},{14.0408,10.9372},{14.5885,10.8843},{13.4698,11.3977},{13.4065,11.0253},{13.904,10.8165},{13.3928,10.4215},{13.742,11.4924},{13.4728,11.8122},{14.6832,11.8787},{13.9761,10.0893},{13.616,10.5078},{14.5592,11.431},{13.6078,10.9727},{13.1036,10.7765},{14.0903,10.9964},{14.594,10.1311},{14.9336,11.1825},{14.0154,10.4033},{13.5802,11.4219},{14.4287,11.4842},{13.2385,11.8214},{14.9057,10.9805},{14.3138,10.3785},{13.7926,10.997},{13.2572,11.7687},{14.0863,10.8732},{13.2765,10.6455},{13.3041,10.8843},{14.6182,10.4077},{14.6607,10.7085},{14.4041,11.2547},{13.8396,11.3376},{13.4372,11.8551},{14.741,11.0175},{14.277,11.1696},{13.5017,11.5155},{13.991,10.4073},{13.4959,10.3048},{13.7859,11.2886},{14.3018,11.043},{14.0573,10.3881},{14.9162,11.3338},{14.0335,10.2203},{13.218,10.6517},{13.6281,11.8787},{14.3602,10.0321},{14.1335,10.1998},{14.3697,11.5707},{13.0549,11.1107},{13.5882,11.3319},{13.2803,11.0898},{13.8474,11.2714},{14.4972,11.3433},{14.5762,10.283},{13.6319,10.878},{1.66304,8.8446},{1.63304,8.62115},{1.51148,8.1498},{1.73132,8.6205},{1.47566,8.04535},{1.55987,8.15577},{1.06141,8.12661},{1.25569,8.74628},{1.91196,8.28315},{1.30162,8.20604},{1.94911,8.44178},{1.75096,8.37281},{1.07746,8.49956},{1.04448,8.86557},{1.64108,8.36044},{1.30457,8.30412},{1.20505,8.93761},{1.92527,8.71653},{1.08741,8.65658},{1.33703,8.56306},{1.70193,8.8969},{1.71883,8.76334},{1.02351,8.97453},{1.50961,8.93547},{1.25768,8.81123},{1.14151,8.20679},{1.25301,8.89247},{1.5796,8.33048},{1.39203,8.62408},{1.19604,8.03311},{1.98453,8.50061},{1.33723,8.18958},{1.43822,8.2625},{1.9061,8.52563},{1.91908,8.24313},{1.08869,8.62101},{1.14003,8.80752},{1.38435,8.16353},{1.78205,8.89396},{1.099,8.03973},{1.70519,8.24051},{1.24651,8.95821},{1.13298,8.82611},{1.28869,8.52502},{1.4502,8.48473},{1.55813,8.43473},{1.98534,8.89536},{1.6243,8.42357},{1.15785,8.53041},{1.9492,8.07694},{1.77354,8.03789},{1.69795,8.91357},{1.84541,8.0823},{1.0771,8.62746},{1.97626,8.1761},{1.66718,8.68145},{1.41661,8.9137},{1.63966,8.5496},{1.73981,8.92834},{1.07462,8.19001},{1.41307,8.63274},{1.62474,8.39842},{1.5281,8.24905},{1.82198,8.68596},{1.77946,8.77118},{1.76289,8.553},{1.80907,8.46084},{1.46657,8.65448},{1.54313,8.54367},{1.28194,8.51939},{1.71977,8.94912},{1.20084,8.13639},{1.86282,8.8405},{1.68598,8.60264},{1.76884,8.7606},{1.79265,8.18191},{1.39334,8.41739},{1.58033,8.92144},{1.66644,8.40231},{1.6074,8.44589},{12.1735,1.37029},{12.9989,1.98256},{12.8311,1.46545},{12.637,1.37426},{12.0091,1.91898},{12.8937,1.7289},{12.8681,1.09449},{12.8653,1.73092},{12.935,1.55127},{12.3336,1.70382},{12.3119,1.12621},{12.8857,1.70521},{12.5436,1.46607},{12.6267,1.21003},{12.8684,1.23405},{12.6559,1.04187},{12.6043,1.65482},{12.0244,1.43547},{12.1203,1.66148},{12.8097,1.1294},{12.5805,1.70338},{12.8583,1.44856},{12.7979,1.72358},{12.1795,1.73286},{12.2748,1.51303},{12.4367,1.58671},{12.6392,1.32242},{12.2919,1.18284},{12.7885,1.91858},{12.3929,1.65687},{12.1526,1.0488},{12.6987,1.75697},{12.7036,1.72318},{12.1924,1.82389},{12.3847,1.00217},{12.9533,1.96511},{12.7056,1.81158},{12.4137,1.50343},{12.5352,1.59314},{12.2363,1.81},{12.1062,1.67297},{12.3967,1.74541},{12.9954,1.68864},{12.9283,1.78388},{12.6072,1.32112},{12.4407,1.75984},{12.3699,1.13949},{12.5168,1.07354},{12.8627,1.70925},{12.8974,1.24731},{12.7114,1.85072},{12.2124,1.41698},{12.6623,1.62608},{12.9204,1.19746},{12.2192,1.1567},{12.0075,1.3254},{12.8297,1.40418},{12.0708,1.82507},{12.0928,1.99906},{12.609,1.70003},{12.3202,1.0497},{12.4599,1.6901},{12.1892,1.97669},{12.7636,1.05185},{12.6859,1.66107},{12.2992,1.39736},{12.5118,1.51158},{12.8143,1.17409},{12.1377,1.73476},{12.3715,1.35688},{12.8915,1.37901},{12.6823,1.72114},{12.7832,1.75309},{12.5462,1.876},{12.7521,1.15516},{12.576,1.07233},{12.2049,1.0359},{12.7624,1.39404},{12.0126,1.52608},{12.4459,1.69852}
    		
    														};   															
    // Number of data  
    private static int dataLenght = dataCollection.length;
    
    // array of data that are treated
    private static ArrayList<Data> dataSet = new ArrayList<Data>();
    
    // centroids collection
    private static ArrayList<Centroid> centroids = new ArrayList<Centroid>();
    
    /**
     * Principal function that will cluster the collection data
     */
    private static void kMean(){
    	// Give a really big number that we are sure that it will be bigger than the first comparaison with the distance
        double bigNumber = Math.pow(10, 10); 
        
        // The minimum that will be the reference when we calculate the distences
        double minimum = bigNumber;         
        
        // The distance between two points
        double distance = 0.0; 
        
        // Iterator of the data collection
        int dataNumber = 0;
        
        // assignment of the point cluster
        int cluster = 0;
        
        // the variable that will permit to detect the convergence
        boolean isStillMoving = true;
        
        // this variable allows to treat data of each iteration
        Data newData = null;
        
        // Get the points from the data collection one by one and recalculating centroids with each new one
        while(dataSet.size() < dataLenght){
            newData = new Data(dataCollection[dataNumber][0], dataCollection[dataNumber][1]);
            dataSet.add(newData);
            minimum = bigNumber;
            for(int i = 0; i < NUM_CLUSTERS; i++){
            	// calculat the distance between the data and the centroid
                distance = dist(newData, centroids.get(i));
                
                // give the data to the right cluster
                if(distance < minimum){
                    minimum = distance;
                    cluster = i;
                }
            }
            // assignment of the cluster for the point
            newData.setCluster(cluster);
            
            dataNumber++;
        }
        
        // recalculating of the centroids until the convergence
        while(isStillMoving){
            // calculate new centroids.
            for(int i = 0; i < NUM_CLUSTERS; i++){
                int totalX = 0;
                int totalY = 0;
                int totalInCluster = 0;
                for(int j = 0; j < dataSet.size(); j++){
                    if(dataSet.get(j).getCluster() == i){
                        totalX += dataSet.get(j).getcoordinateX();
                        totalY += dataSet.get(j).getcoordinateY();
                        totalInCluster++;
                    }
                }
                if(totalInCluster > 0){
                    centroids.get(i).setCoordinateX(totalX / totalInCluster);
                    centroids.get(i).setCoordinateY(totalY / totalInCluster);
                }
            }
            
            // Assign all data to the new centroids
            isStillMoving = false;
            
            for(int i = 0; i < dataSet.size(); i++){
                Data tempData = dataSet.get(i);
                minimum = bigNumber;
                for(int j = 0; j < NUM_CLUSTERS; j++){
                    distance = dist(tempData, centroids.get(j));
                    if(distance < minimum){
                        minimum = distance;
                        cluster = j;
                    }
                }
                tempData.setCluster(cluster);
                if(tempData.getCluster() != cluster){
                    tempData.setCluster(cluster);
                    isStillMoving = true;
                }
            }
        }
    }
    
    /**
     * Calculate Euclidean distance.
     * @param d - Data object.
     * @param c - Centroid object.
     * @return - double value.
     */
    private static double dist(Data d, Centroid c){
        return Math.sqrt(Math.pow((c.getCoordinateY() - d.getcoordinateY()), 2) + Math.pow((c.getCoordinateX() - d.getcoordinateX()), 2));
    }
    
    /**
     * This function allows to display the clusters at the end of the k-means algorithm to constat the results 
     */
    private static void displayClusters(){
    	double w = 0.0, b = 0.0;
    	double dispertion = 0.0, dissimilitude = 0.0, DispertionFianl=0.0, similarity=0.0;
    	int members=0;
    	
    	// Get the data centroid
        Centroid C = collectionCentroid();
        
        for(int i = 0; i < NUM_CLUSTERS; i++){
        	members=0;
            System.out.println("Cluster " + i + " includes:");
            for(int j = 0; j < dataLenght; j++){
                if(dataSet.get(j).getCluster() == i){
                    System.out.println("     (" + dataSet.get(j).getcoordinateX() + " , " + dataSet.get(j).getcoordinateY() + ")");
                    
                    // gives data of the right clusters for the drawing module
                    if(i==0){
                    	xData1.add(dataSet.get(j).getcoordinateX());
                        yData1.add(dataSet.get(j).getcoordinateY());
                        
                        cxData1.add(centroids.get(i).getCoordinateX());
                        cyData1.add(centroids.get(i).getCoordinateY());
                        
                    }
                    
                    // gives data of the right clusters for the drawing module
                    if(i==1){
                    	xData2.add(dataSet.get(j).getcoordinateX());
                        yData2.add(dataSet.get(j).getcoordinateY());
                        
                        cxData2.add(centroids.get(i).getCoordinateX());
                        cyData2.add(centroids.get(i).getCoordinateY());
                    }
                    
                    // gives data of the right clusters for the drawing module
                    if(i==2){
                    	xData3.add(dataSet.get(j).getcoordinateX());
                        yData3.add(dataSet.get(j).getcoordinateY());
                        
                        cxData3.add(centroids.get(i).getCoordinateX());
                        cyData3.add(centroids.get(i).getCoordinateY());
                    }
                    
                    // gives data of the right clusters for the drawing module
                    if(i==3){
                    	xData4.add(dataSet.get(j).getcoordinateX());
                        yData4.add(dataSet.get(j).getcoordinateY());
                        
                        cxData4.add(centroids.get(i).getCoordinateX());
                        cyData4.add(centroids.get(i).getCoordinateY());
                    }
                    
                    // gives data of the right clusters for the drawing module
                    if(i==4){
                    	xData5.add(dataSet.get(j).getcoordinateX());
                        yData5.add(dataSet.get(j).getcoordinateY());
                        
                        cxData5.add(centroids.get(i).getCoordinateX());
                        cyData5.add(centroids.get(i).getCoordinateY());
                    }
                    
                    // gives data of the right clusters for the drawing module
                    if(i==5){
                    	xData6.add(dataSet.get(j).getcoordinateX());
                        yData6.add(dataSet.get(j).getcoordinateY());
                        
                        cxData6.add(centroids.get(i).getCoordinateX());
                        cyData6.add(centroids.get(i).getCoordinateY());
                    }
                    
                    // gives data of the right clusters for the drawing module
                    if(i==6){
                    	xData7.add(dataSet.get(j).getcoordinateX());
                        yData7.add(dataSet.get(j).getcoordinateY());
                        
                        cxData7.add(centroids.get(i).getCoordinateX());
                        cyData7.add(centroids.get(i).getCoordinateY());
                    }
                    
                    // gives data of the right clusters for the drawing module
                    if(i==7){
                    	xData8.add(dataSet.get(j).getcoordinateX());
                        yData8.add(dataSet.get(j).getcoordinateY());
                        
                        cxData8.add(centroids.get(i).getCoordinateX());
                        cyData8.add(centroids.get(i).getCoordinateY());
                    }
                    
                    // calculat the W parameter
                    w += dist(dataSet.get(j), centroids.get(i));
                    
                    // calculat the B parameter
                    b += Math.sqrt(Math.pow((C.getCoordinateY() - centroids.get(i).getCoordinateY()), 2) + Math.pow((C.getCoordinateX() - centroids.get(i).getCoordinateX()), 2));
                    
                    members++;
                    
                    // calculat the dispecrtion for the DB index
                    dispertion+= Math.sqrt(Math.pow((centroids.get(i).getCoordinateY()) - dataSet.get(j).getcoordinateY(), 2) + Math.pow((centroids.get(i).getCoordinateX()) - dataSet.get(j).getcoordinateX() , 2));
                
                }
            } 
            
            // final dispecrtion for the DB index
            DispertionFianl+=(dispertion/members);
         	if((i>0) && (i < NUM_CLUSTERS)){
         		// calculat dissimilarity for the DB index
         		dissimilitude+= Math.sqrt(Math.pow((centroids.get(i).getCoordinateY()) - (centroids.get(i-1).getCoordinateY()), 2) + Math.pow((centroids.get(i).getCoordinateX()) - (centroids.get(i-1).getCoordinateX()) , 2));
         	}
            System.out.println();
        } 
        
        System.out.println("W = "+ w);
        System.out.println("B = "+ b);
        System.out.println("CH = "+ ((dataLenght - NUM_CLUSTERS)*b)/((dataLenght - 1)*w));

        System.out.println("DB = "+ round(((DispertionFianl)/((dissimilitude*NUM_CLUSTERS))),2));
        
        System.out.println("*********************************************************************************\n");
    }
     
    
    
    /**
     * This function allows to calculat the centroid of the data
     * @return Centroid value
     */
    private static Centroid collectionCentroid(){
    	double x=0.0, y=0.0;
    	
    	for(int j = 0; j < dataLenght; j++){
            x += dataSet.get(j).getcoordinateX();
            y += dataSet.get(j).getcoordinateY();  
        } 
    	
    	return new Centroid(x/dataLenght,y/dataLenght);
    }
    
    /**
     * This function allows to give a round of nembers
     * @param value
     * @param places
     * @return double value
     */
    public static double round(double value, int places) {
        if (places < 0) throw new IllegalArgumentException();

        long factor = (long) Math.pow(10, places);
        value = value * factor;
        long tmp = Math.round(value);
        return (double) tmp / factor;
    }

    public static void main(String[] args) throws IOException{
    	Scanner sc = new Scanner(System.in);
        System.out.println("Donner le K compris entre 1 et 8 pour le nombre de clusters : ");
        NUM_CLUSTERS = sc.nextInt();
        sc.nextLine();
        
        int k=1;
        double x,y;
        while(k <= NUM_CLUSTERS){
        	
        	Random r = new Random();
        	x = 0.1 + (10.0 - 0.1) * r.nextDouble();
        	y = 0.1 + (10.0 - 0.1) * r.nextDouble();
        	
        	x = round(x, 2);
        	y = round(y, 2);
            centroids.add(new Centroid(x, y));
            System.out.println("Centroid "+ k +" x: "+ x +"y: "+y);
        	k++;
        }
        /* Executing of the cours exemple
        centroids.add(new Centroid(4.0, 2.0));
        System.out.println("Centroid "+ k +" x: 4.0 y: 2.0");
        
        centroids.add(new Centroid(5.0, 2.0));
        System.out.println("Centroid "+ k +" x: 5.0 y: 2.0");*/
        kMean();
        
        displayClusters();
        
        // Print out centroid results.
        System.out.println("Centroids finalized at:");
        for(int i = 0; i < NUM_CLUSTERS; i++){
            System.out.println("     (" + centroids.get(i).getCoordinateX() + ") , (" + centroids.get(i).getCoordinateY()+")");
        }
        
        // draw the chart
        ExampleChart<XYChart> exampleChart = new charts();
        XYChart chart = exampleChart.getChart();
        new SwingWrapper<XYChart>(chart).displayChart();
        
    }
    
}